* cabal-auto-expose-cli
  /cabal-auto-expose/ is the command line analog of the [[https://github.com/deech/cabal-auto-expose/tree/master/cabal-auto-expose#cabal-auto-expose][cabal-auto-expose]]
  library; you can either point it at or run it the root of at an existing
  Haskell project and it will read the existing ~.cabal~ file and output one to
  ~stdout~ with Haskell modules and [[https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-library-signatures][Backpack signature files]] explicitly exposed.
  
** Motivation
   This app and the [[https://github.com/deech/cabal-auto-expose/tree/master/cabal-auto-expose][library]] that backs it form a small suite of tools that try to
   auto detect Haskell modules and Backpack signatures in a Cabal project. The
   motivation is similar to [[https://github.com/sol/hpack][hpack]] but there are some tradeoffs and advantages
   which you read about in the [[https://github.com/deech/cabal-auto-expose/tree/master/cabal-auto-expose#cabal-auto-expose][library's README]].

   This CLI app exists because the library which works well as a build time
   dependency for Haskell projects with [[https://github.com/deech/cabal-auto-expose/blob/master/cabal-auto-expose/README.org#L56][complex custom builds]] is much less
   practical for [[https://cabal.readthedocs.io/en/latest/cabal-package.html?highlight=Simple#example-a-package-containing-a-simple-library][simple builds]] which are by far the most common use case. It
   uses the library to read an existing ~.cabal~ file and search the
   [[https://cabal.readthedocs.io/en/latest/cabal-package.html?highlight=hs-source-dirs#pkg-field-hs-source-dirs][hs-source-dirs]] for modules and signatures and then prints a new ~.cabal~ file
   to ~stdout~ with them explicitly exposed.

   One big advantage of using it vs. the library is it works with Cabal's new
   [[https://cabal.readthedocs.io/en/3.4/cabal-package.html?highlight=internal%20libraries#sublibs][internal libraries]] which currently do not support [[https://github.com/haskell/cabal/issues/6305][custom builds]].
   
** Quick Start
   The easiest way to get started is to run this app at the root of your Haskell
   project with no arguments, as an example this is the output of running it at
   the root of the [[https://github.com/deech/cabal-auto-expose/blob/master/auto-expose-example-project/][example project]] with the redundant portions elided:
   
   #+BEGIN_SRC EXAMPLE
   > cabal-auto-expose
   cabal-version: >=2.0
   name:          auto-expose-example-project
   ...
   library
       exposed-modules:
           Lib
           Lib.Internal.Internal
   
       signatures:       LibSig
   ...
   executable example-exe
       ...
   
   test-suite example-test-suite
       ...
   
   benchmark example-benchmark
       ...
   #+END_SRC EXAMPLE

   As you can see the [[https://github.com/deech/cabal-auto-expose/blob/master/auto-expose-example-project/auto-expose-example-project.cabal#L21][original ~.cabal~ file]] did not have any ~exposed-modules~
   or ~signatures~ but the result of ~cabal-auto-expose~ does. This is a valid
   ~.cabal~ file and can replace the existing one or be piped to a tool like
   [[https://github.com/NixOS/cabal2nix][cabal2nix]]:
   
   #+BEGIN_EXAMPLE
   > cabal-auto-expose > ./auto-expose-example-project.cabal
   #+END_EXAMPLE

   You may also point it to the root of an existing Haskell project and it will
   find the project's ~.cabal~ file and search its source directories. The
   project path must contain the ~.cabal~ file at its root, if you have [[https://cabal.readthedocs.io/en/latest/nix-local-build.html?highlight=multiple%20packages#developing-multiple-packages][a
   multi-package project]] you'll need to point it at the specific sub package
   directory that you care about:
   
   #+BEGIN_EXAMPLE
   > cabal-auto-expose --projectPath=/path/to/my/project 
   #+END_EXAMPLE
